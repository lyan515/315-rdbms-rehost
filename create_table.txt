Okay, so here's my plan for implementing this.

since the parser function, before doing anything else, removes all white space from the input string, we can assume (but should probably
check anyway) that the first 11 characters of the input string are "CREATETABLE". Knowing this, we can either begin parsing at the 12th 
character, or just copy the input string starting at the 12th character into a new string, then use commandCreate on that string.

Getting the primary keys and attribute lists will probably require their own functions if we expect this code to look nice.

from here we assume that both the attribute list and the primary key are required fields, as is the only case in the assignment page
the only thing they gave us for create is "(create-cmd ::= CREATE TABLE relation-name ( typed-attribute-list ) PRIMARY KEY ( attribute-list ) "
so, after we get our string starting at the 12th character of the initial input, we use the stl find() function (or strstr()) to find the
first instance of an open parenthesis "(". If we fail to find any open parenthesis, we abandon this command, and prompt the user to check
their inputs, syntax, and spelling. Otherwise, this marks the start of our attribute list (I'll explain that later in this file). The 
section of our input string from its starting point to that first "(" is the tableName string. 

We then use the stl strstr() function to find the first instance of the "PRIMARYKEY" substring. As with finding "(", if "PRIMARYKEY" is 
not found, we abandon this create instruction, and prompt the user to check their inputs (etc. etc.). Then, we take the string starting
11 characters after that posiition we just found ("PRIMARYKEY" is 10 characters) and parse through it once to remove parenthesis. Then, we
split the string by commas (there's actually a lot of ways to do that so I'll let you pick how to do that), which will give us our string
vector of primary keys.

(Warning: The following implementation is not... runtime friendly)

(I forgot to mention this before my explanation got long)
First, we initialize an empty pair<string,int> vector.

Returning to the attributes list, this one, it turns out, is a bit tedious. Fortunately, thanks to the previous two things we did, we
have the start point (the position of the first open parenthesis) and the end point (the position immediately before the position of
"PRIMARYKEY") of the section of the input string this section deals with.
First, we remove the first open parenthesis and our last close parenthesis (assuming this wasn't done before the strig was
passed into the function evaluating this part.. Like with the primary key, we can split this section of string by commas (giving us a
string vector). Then, for each element of this string list, we check for the existence of each type (INTEGER, VARCHAR, CHAR, etc.)
(probably using strstr() to do this as well). If no type is found, we abandon the create function, prompting the user to check their
inputs, etc. etc. Once we get the type position, we read the portion of the element before this position into a name string, and, since
we had to figure out what our type was to determine where it is, we simply evaluate our type to get the size int. We then take that
size int and name string, add pair<name,size> to our pair<string,int> vector, and repeat this process for every element in the string 
vector for this section we made earier.
